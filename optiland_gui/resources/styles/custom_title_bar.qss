/* optiland_gui/resources/styles/custom_title_bar.qss */

#CustomTitleBar {
    background-color: #383838; /* Dark gray, adjust to match screenshot */
    border-bottom: 1px solid #202020; /* Slightly darker border */
    color: #E0E0E0; /* Default text color for labels in title bar */
}

#TitleBarOptilandLabel {
    color: #FFFFFF; /* White or very light gray */
    font-weight: bold;
    font-size: 14px; /* Adjust as needed */
    padding-left: 5px; /* Space from the very left edge */
}

#TitleBarMenuBar {
    background-color: transparent; /* Menu bar should blend with title bar */
    color: #D0D0D0; /* Text color for top-level menu items */
    border: none;
    padding: 0px; margin: 0px; /* Remove default QMenuBar padding/margin */
    font-size: 12px; /* Adjust as needed */
}

#TitleBarMenuBar::item {
    background: transparent;
    color: #D0D0D0;
    padding: 6px 10px; /* Spacing for each menu item like File, Edit */
}

#TitleBarMenuBar::item:selected { /* Hover or when menu is open */
    background-color: #505050; /* Slightly lighter gray for selection */
    color: #FFFFFF;
}

#TitleBarMenuBar::item:pressed {
    background-color: #555555;
}

/* Style for the QMenu dropdowns themselves (if needed, often inherits from main theme) */
QMenu {
    background-color: #383838;
    color: #E0E0E0;
    border: 1px solid #505050;
}
QMenu::item:selected {
    background-color: #007ACC; /* Highlight color for selected menu actions */
    color: #FFFFFF;
}


#TitleBarProjectLabel {
    color: #B0B0B0; /* Lighter gray for less emphasis */
    font-size: 11px; /* Smaller font */
    padding-right: 15px; /* Space before window controls */
}

#TitleBarMinimizeButton,
#TitleBarMaximizeButton,
#TitleBarCloseButton {
    background-color: transparent;
    color: #C0C0C0; /* Color for the button text/icon */
    border: none;
    font-weight: bold; /* Make symbols like _ X [] bold */
    font-size: 12px; /* Adjust for symbol size */
    padding: 0px; /* Remove default button padding */
    margin: 2px; /* Small margin around buttons */
    min-width: 28px; /* Ensure buttons are clickable */
    min-height: 28px;
}

#TitleBarMinimizeButton:hover,
#TitleBarMaximizeButton:hover {
    background-color: #555555;
    color: #FFFFFF;
}

#TitleBarCloseButton:hover {
    background-color: #E81123; /* Standard red for close button hover */
    color: #FFFFFF;
}

#TitleBarMinimizeButton:pressed,
#TitleBarMaximizeButton:pressed,
#TitleBarMaximizeButton:checked { /* When maximized */
    background-color: #656565;
}

#TitleBarCloseButton:pressed {
    background-color: #F1707A; /* Lighter red when pressed */
}

/* Quick Actions Toolbar styling */
QToolBar#QuickActionsToolbar {
    background-color: #2F2F2F; /* Slightly different shade than title bar */
    border-bottom: 1px solid #202020;
    padding: 4px;
    spacing: 6px; /* Spacing between toolbar items */
}

QToolBar#QuickActionsToolbar QToolButton {
    color: #D0D0D0;
    background-color: #3F3F3F; /* Button background */
    border: 1px solid #505050;
    padding: 5px 8px;
    border-radius: 3px;
    font-size: 11px;
}
QToolBar#QuickActionsToolbar QToolButton:hover {
    background-color: #505050;
    border-color: #606060;
}
QToolBar#QuickActionsToolbar QToolButton:pressed {
    background-color: #454545;
}
QToolBar#QuickActionsToolbar QToolButton:disabled {
    color: #707070;
    background-color: #3A3A3A;
}

```

**Key Steps and Considerations for This Refactoring:**

1.  **Frameless Hint:** `self.setWindowFlags(Qt.FramelessWindowHint | Qt.Window)` is crucial.
2.  **`CustomTitleBar` Widget:** This new widget (`optiland_gui/widgets/custom_title_bar.py`) encapsulates all elements of your new title bar.
    * It takes the `QMenuBar` instance as an argument.
    * It implements `mousePressEvent`, `mouseMoveEvent`, and `mouseReleaseEvent` to enable dragging the frameless window.
3.  **`MainWindow` Structure:**
    * The `__init__` method is significantly changed.
    * A `QMenuBar` instance (`self._actual_menu_bar_instance`) is created.
    * `_create_actions` remains largely the same.
    * A new method `_populate_main_menu_bar` is used to add menus and actions to `self._actual_menu_bar_instance` (instead of `self.menuBar()`).
    * The `CustomTitleBar` is instantiated with this menu bar.
    * A new `QToolBar` (`self.quick_actions_toolbar`) is created for the "Quick Actions".
    * An `overall_main_widget` with a `QVBoxLayout` becomes the new central widget of the `QMainWindow`. This layout holds the `CustomTitleBar`, then the `quick_actions_toolbar`, then the `main_splitter` (which contains your sidebar and the placeholder for docks).
    * The `_apply_default_dock_layout` method will still add `QDockWidget`s to the `QMainWindow` itself, and they will arrange around the `overall_main_widget`.
4.  **Window Control Logic:** The `CustomTitleBar` emits signals for minimize, maximize/restore, and close. The `MainWindow` connects these signals to its own `showMinimized()`, a new `_handle_maximize_restore()`, and `close()` slots. The `changeEvent` in `MainWindow` is used to update the maximize button's state if the window is maximized/restored by OS means.
5.  **Styling (QSS):** You'll need to add QSS rules (like in `custom_title_bar.qss`) to style the new title bar, its labels, the embedded menu bar, and the custom window control buttons to match the appearance in your screenshot. This is critical for the visual integration.
6.  **Project Name:** The `CustomTitleBar` has a `set_project_name` method. You'll need to call this from `MainWindow` whenever the project name changes (e.g., after loading or saving a file, or when a new optic is created). I've added a placeholder call in `__init__` and connected it to `opticLoaded` and `opticChanged` signals.
7.  **Resizing Frameless Window:** This implementation only covers dragging. Resizing a frameless window by dragging its edges is a more complex task and typically involves handling mouse events on the edges of the main window or adding invisible "grip" areas. This is not included in this initial version.

This is a complex update. Test thoroughly after integrating these changes. You'll likely need to adjust QSS and layout spacing to get the exact look and fe